// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`sites list row matches the snapshot 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SiteRow
    site={
      Object {
        "url": "http://www.example.com",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <td>
          http://www.example.com
          <span
            className="c-alert c-alert--danger"
            style={
              Object {
                "fontSize": "10px",
              }
            }
          >
            OAuth key and/or secret not configured
          </span>
        </td>,
        <td>
          <button
            onClick={[Function]}
            style={
              Object {
                "backgroundColor": "transparent",
                "border": "none",
                "color": "grey",
                "cursor": "pointer",
                "fontSize": "1.5em",
              }
            }
          >
            <i
              className="i-settings"
            />
          </button>
          <Connect(SiteModal)
            closeModal={[Function]}
            isOpen={false}
            site={
              Object {
                "url": "http://www.example.com",
              }
            }
          />
        </td>,
        <td>
          <button
            onClick={[Function]}
            style={
              Object {
                "backgroundColor": "transparent",
                "border": "none",
                "color": "grey",
                "cursor": "pointer",
                "fontSize": "1.5em",
              }
            }
          >
            <i
              className="i-delete"
            />
          </button>
          <Connect(SiteModal)
            closeModal={[Function]}
            isOpen={false}
            site={
              Object {
                "url": "http://www.example.com",
              }
            }
          />
        </td>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "http://www.example.com",
            <span
              className="c-alert c-alert--danger"
              style={
                Object {
                  "fontSize": "10px",
                }
              }
            >
              OAuth key and/or secret not configured
            </span>,
          ],
        },
        "ref": null,
        "rendered": Array [
          "http://www.example.com",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "OAuth key and/or secret not configured",
              "className": "c-alert c-alert--danger",
              "style": Object {
                "fontSize": "10px",
              },
            },
            "ref": null,
            "rendered": "OAuth key and/or secret not configured",
            "type": "span",
          },
        ],
        "type": "td",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <button
              onClick={[Function]}
              style={
                Object {
                  "backgroundColor": "transparent",
                  "border": "none",
                  "color": "grey",
                  "cursor": "pointer",
                  "fontSize": "1.5em",
                }
              }
            >
              <i
                className="i-settings"
              />
            </button>,
            <Connect(SiteModal)
              closeModal={[Function]}
              isOpen={false}
              site={
                Object {
                  "url": "http://www.example.com",
                }
              }
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <i
                className="i-settings"
              />,
              "onClick": [Function],
              "style": Object {
                "backgroundColor": "transparent",
                "border": "none",
                "color": "grey",
                "cursor": "pointer",
                "fontSize": "1.5em",
              },
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "i-settings",
              },
              "ref": null,
              "rendered": null,
              "type": "i",
            },
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "closeModal": [Function],
              "isOpen": false,
              "site": Object {
                "url": "http://www.example.com",
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "td",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <button
              onClick={[Function]}
              style={
                Object {
                  "backgroundColor": "transparent",
                  "border": "none",
                  "color": "grey",
                  "cursor": "pointer",
                  "fontSize": "1.5em",
                }
              }
            >
              <i
                className="i-delete"
              />
            </button>,
            <Connect(SiteModal)
              closeModal={[Function]}
              isOpen={false}
              site={
                Object {
                  "url": "http://www.example.com",
                }
              }
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <i
                className="i-delete"
              />,
              "onClick": [Function],
              "style": Object {
                "backgroundColor": "transparent",
                "border": "none",
                "color": "grey",
                "cursor": "pointer",
                "fontSize": "1.5em",
              },
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "i-delete",
              },
              "ref": null,
              "rendered": null,
              "type": "i",
            },
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "closeModal": [Function],
              "isOpen": false,
              "site": Object {
                "url": "http://www.example.com",
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "td",
      },
    ],
    "type": "tr",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <td>
            http://www.example.com
            <span
              className="c-alert c-alert--danger"
              style={
                Object {
                  "fontSize": "10px",
                }
              }
            >
              OAuth key and/or secret not configured
            </span>
          </td>,
          <td>
            <button
              onClick={[Function]}
              style={
                Object {
                  "backgroundColor": "transparent",
                  "border": "none",
                  "color": "grey",
                  "cursor": "pointer",
                  "fontSize": "1.5em",
                }
              }
            >
              <i
                className="i-settings"
              />
            </button>
            <Connect(SiteModal)
              closeModal={[Function]}
              isOpen={false}
              site={
                Object {
                  "url": "http://www.example.com",
                }
              }
            />
          </td>,
          <td>
            <button
              onClick={[Function]}
              style={
                Object {
                  "backgroundColor": "transparent",
                  "border": "none",
                  "color": "grey",
                  "cursor": "pointer",
                  "fontSize": "1.5em",
                }
              }
            >
              <i
                className="i-delete"
              />
            </button>
            <Connect(SiteModal)
              closeModal={[Function]}
              isOpen={false}
              site={
                Object {
                  "url": "http://www.example.com",
                }
              }
            />
          </td>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "http://www.example.com",
              <span
                className="c-alert c-alert--danger"
                style={
                  Object {
                    "fontSize": "10px",
                  }
                }
              >
                OAuth key and/or secret not configured
              </span>,
            ],
          },
          "ref": null,
          "rendered": Array [
            "http://www.example.com",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "OAuth key and/or secret not configured",
                "className": "c-alert c-alert--danger",
                "style": Object {
                  "fontSize": "10px",
                },
              },
              "ref": null,
              "rendered": "OAuth key and/or secret not configured",
              "type": "span",
            },
          ],
          "type": "td",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <button
                onClick={[Function]}
                style={
                  Object {
                    "backgroundColor": "transparent",
                    "border": "none",
                    "color": "grey",
                    "cursor": "pointer",
                    "fontSize": "1.5em",
                  }
                }
              >
                <i
                  className="i-settings"
                />
              </button>,
              <Connect(SiteModal)
                closeModal={[Function]}
                isOpen={false}
                site={
                  Object {
                    "url": "http://www.example.com",
                  }
                }
              />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <i
                  className="i-settings"
                />,
                "onClick": [Function],
                "style": Object {
                  "backgroundColor": "transparent",
                  "border": "none",
                  "color": "grey",
                  "cursor": "pointer",
                  "fontSize": "1.5em",
                },
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "i-settings",
                },
                "ref": null,
                "rendered": null,
                "type": "i",
              },
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "closeModal": [Function],
                "isOpen": false,
                "site": Object {
                  "url": "http://www.example.com",
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "td",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <button
                onClick={[Function]}
                style={
                  Object {
                    "backgroundColor": "transparent",
                    "border": "none",
                    "color": "grey",
                    "cursor": "pointer",
                    "fontSize": "1.5em",
                  }
                }
              >
                <i
                  className="i-delete"
                />
              </button>,
              <Connect(SiteModal)
                closeModal={[Function]}
                isOpen={false}
                site={
                  Object {
                    "url": "http://www.example.com",
                  }
                }
              />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <i
                  className="i-delete"
                />,
                "onClick": [Function],
                "style": Object {
                  "backgroundColor": "transparent",
                  "border": "none",
                  "color": "grey",
                  "cursor": "pointer",
                  "fontSize": "1.5em",
                },
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "i-delete",
                },
                "ref": null,
                "rendered": null,
                "type": "i",
              },
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "closeModal": [Function],
                "isOpen": false,
                "site": Object {
                  "url": "http://www.example.com",
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "td",
        },
      ],
      "type": "tr",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
